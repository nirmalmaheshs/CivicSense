-- Create or replace the database named POLICYVAULT
CREATE OR REPLACE DATABASE POLICYVAULT;

-- Create or replace the schema named CIVICPOLICIES in the POLICYVAULT database
CREATE OR REPLACE SCHEMA POLICYVAULT.CIVICPOLICIES;

-- Create or replace a Python-based table function named text_chunker
-- This function splits input PDF text into chunks using a text splitter from LangChain
-- The chunks have a configurable size and overlap for maintaining context
CREATE OR REPLACE FUNCTION text_chunker(pdf_text STRING)
RETURNS TABLE (chunk VARCHAR)
LANGUAGE PYTHON
RUNTIME_VERSION = '3.9'
HANDLER = 'text_chunker'
PACKAGES = ('snowflake-snowpark-python', 'langchain')
AS $$
from snowflake.snowpark.types import StringType, StructField, StructType
from langchain.text_splitter import RecursiveCharacterTextSplitter
import pandas as pd

class text_chunker:
    def process(self, pdf_text: str):
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1512,  # Size of each chunk
            chunk_overlap=256,  # Overlap between chunks to maintain context
            length_function=len
        )
        chunks = text_splitter.split_text(pdf_text)
        df = pd.DataFrame(chunks, columns=['chunks'])
        yield from df.itertuples(index=False, name=None)
$$;

-- Create or replace a stage named docs for managing files
-- The stage uses Snowflake Server-Side Encryption (SSE) and enables directory listing
CREATE OR REPLACE STAGE docs
ENCRYPTION = (TYPE = 'SNOWFLAKE_SSE')
DIRECTORY = (ENABLE = TRUE);

-- Create or replace a table named Policies to store information about PDF files and their chunks
CREATE OR REPLACE TABLE Policies (
    RELATIVE_PATH VARCHAR(16777216),
    SIZE NUMBER(38, 0),
    FILE_URL VARCHAR(16777216),
    SCOPED_FILE_URL VARCHAR(16777216),
    CHUNK VARCHAR(16777216),
    CATEGORY VARCHAR(16777216)
);

-- Insert data into the Policies table
-- The data is generated by reading files from the docs stage and processing them with the text_chunker function
INSERT INTO Policies (
    relative_path,
    size,
    file_url,
    scoped_file_url,
    chunk
)
SELECT
    relative_path,
    size,
    file_url,
    BUILD_SCOPED_FILE_URL(@docs, relative_path) AS scoped_file_url,
    func.chunk AS chunk
FROM
    DIRECTORY(@docs),
    TABLE(
        text_chunker(
            TO_VARCHAR(
                SNOWFLAKE.CORTEX.PARSE_DOCUMENT(
                    @docs,
                    relative_path,
                    { 'mode': 'LAYOUT' }
                )
            )
        )
    ) AS func;

-- Create or replace a Cortex Search service for full-text search capabilities
-- The service indexes the 'chunk' column and associates it with document metadata like category and URLs
CREATE OR REPLACE CORTEX SEARCH SERVICE SEARCH_SERVICE
ON chunk
ATTRIBUTES category
WAREHOUSE = COMPUTE_WH
TARGET_LAG = '1 minute'
AS (
    SELECT
        chunk,
        relative_path,
        file_url
    FROM
        Policies
);
